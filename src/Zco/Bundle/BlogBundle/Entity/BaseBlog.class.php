<?php

/**
 * BaseBlog
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $category_id
 * @property integer $current_version_id
 * @property timestamp $date
 * @property timestamp $edition_date
 * @property timestamp $proposition_date
 * @property timestamp $validation_date
 * @property timestamp $publication_date
 * @property integer $status
 * @property string $topic_url
 * @property boolean $comments_status
 * @property string $image
 * @property string $redirection_url
 * @property string $link_name
 * @property string $link_url
 * @property Categorie $Category
 * @property BlogVersion $CurrentVersion
 * @property Doctrine_Collection $Authors
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseBlog extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('zcov2_blog');
        $this->hasColumn('blog_id as id', 'integer', 11, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '11',
             ));
        $this->hasColumn('blog_id_categorie as category_id', 'integer', 11, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '11',
             ));
        $this->hasColumn('blog_id_version_courante as current_version_id', 'integer', 11, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '11',
             ));
        $this->hasColumn('blog_date as date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('blog_date_edition as edition_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('blog_date_proposition as proposition_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('blog_date_validation as validation_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('blog_date_publication as publication_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('blog_etat as status', 'integer', 1, array(
             'type' => 'integer',
             'length' => '1',
             ));
        $this->hasColumn('blog_lien_topic as topic_url', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('blog_commentaires as comments_status', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));
        $this->hasColumn('blog_image as image', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('blog_url_redirection as redirection_url', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '255',
             ));
        $this->hasColumn('blog_lien_nom as link_name', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('blog_lien_url as link_url', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Categorie as Category', array(
             'local' => 'category_id',
             'foreign' => 'cat_id'));

        $this->hasOne('BlogVersion as CurrentVersion', array(
             'local' => 'current_version_id',
             'foreign' => 'version_id'));

        $this->hasMany('BlogAuteur as Authors', array(
             'local' => 'blog_id',
             'foreign' => 'auteur_id_billet'));
    }
}