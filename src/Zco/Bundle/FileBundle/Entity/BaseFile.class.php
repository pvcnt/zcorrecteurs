<?php

/**
 * BaseFile
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property integer $license_id
 * @property integer $thumbnail_id
 * @property string $name
 * @property string $extension
 * @property string $path
 * @property string $major_mime
 * @property string $minor_mime
 * @property integer $type
 * @property integer $size
 * @property integer $width
 * @property integer $height
 * @property boolean $quota_affected
 * @property License $License
 * @property Utilisateur $User
 * @property FileThumbnail $Thumbnail
 * @property Doctrine_Collection $Usage
 * @property Doctrine_Collection $FileLicense
 * @property Doctrine_Collection $FileThumbnail
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseFile extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('file');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('license_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('thumbnail_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('extension', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '50',
             ));
        $this->hasColumn('path', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('major_mime', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '20',
             ));
        $this->hasColumn('minor_mime', 'string', 30, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '30',
             ));
        $this->hasColumn('type', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => '4',
             ));
        $this->hasColumn('size', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('width', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => false,
             'length' => '4',
             ));
        $this->hasColumn('height', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => false,
             'length' => '4',
             ));
        $this->hasColumn('quota_affected', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('License', array(
             'local' => 'license_id',
             'foreign' => 'id'));

        $this->hasOne('Utilisateur as User', array(
             'local' => 'user_id',
             'foreign' => 'utilisateur_id'));

        $this->hasOne('FileThumbnail as Thumbnail', array(
             'local' => 'thumbnail_id',
             'foreign' => 'id'));

        $this->hasMany('FileUsage as Usage', array(
             'local' => 'id',
             'foreign' => 'file_id'));

        $this->hasMany('FileLicense', array(
             'local' => 'id',
             'foreign' => 'file_id'));

        $this->hasMany('FileThumbnail', array(
             'local' => 'id',
             'foreign' => 'file_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'date',
             ),
             'updated' => 
             array(
              'name' => 'edition_date',
             ),
             ));
        $this->actAs($timestampable0);
    }
}