<?php

/**
 * BaseDictee
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $utilisateur_id
 * @property integer $auteur_id
 * @property integer $etat
 * @property integer $difficulte
 * @property integer $participations
 * @property integer $note
 * @property integer $temps_estime
 * @property string $titre
 * @property string $source
 * @property timestamp $creation
 * @property timestamp $edition
 * @property timestamp $validation
 * @property string $description
 * @property string $texte
 * @property string $indications
 * @property string $commentaires
 * @property string $format
 * @property string $icone
 * @property Utilisateur $Utilisateur
 * @property Auteur $Auteur
 * @property Doctrine_Collection $Dictee_Participation
 * @property Doctrine_Collection $DicteeTag
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseDictee extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('zcov2_dictees');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => '11',
             ));
        $this->hasColumn('utilisateur_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('auteur_id', 'integer', 11, array(
             'type' => 'integer',
             'notnull' => false,
             'length' => '11',
             ));
        $this->hasColumn('etat', 'integer', 1, array(
             'type' => 'integer',
             'length' => '1',
             ));
        $this->hasColumn('difficulte', 'integer', 1, array(
             'type' => 'integer',
             'length' => '1',
             ));
        $this->hasColumn('participations', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('note', 'integer', 2, array(
             'type' => 'integer',
             'length' => '2',
             ));
        $this->hasColumn('temps_estime', 'integer', 2, array(
             'type' => 'integer',
             'length' => '2',
             ));
        $this->hasColumn('titre', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('source', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('creation', 'timestamp', 25, array(
             'type' => 'timestamp',
             'length' => '25',
             ));
        $this->hasColumn('edition', 'timestamp', 25, array(
             'type' => 'timestamp',
             'length' => '25',
             ));
        $this->hasColumn('validation', 'timestamp', 25, array(
             'type' => 'timestamp',
             'length' => '25',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'length' => '',
             ));
        $this->hasColumn('texte', 'string', null, array(
             'type' => 'string',
             'length' => '',
             ));
        $this->hasColumn('indications', 'string', null, array(
             'type' => 'string',
             'length' => '',
             ));
        $this->hasColumn('commentaires', 'string', null, array(
             'type' => 'string',
             'length' => '',
             ));
        $this->hasColumn('format', 'string', 25, array(
             'type' => 'string',
             'length' => '25',
             ));
        $this->hasColumn('icone', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Utilisateur', array(
             'local' => 'utilisateur_id',
             'foreign' => 'utilisateur_id'));

        $this->hasOne('Auteur', array(
             'local' => 'auteur_id',
             'foreign' => 'id'));

        $this->hasMany('Dictee_Participation', array(
             'local' => 'id',
             'foreign' => 'dictee_id'));

        $this->hasMany('DicteeTag', array(
             'local' => 'id',
             'foreign' => 'dictee_id'));
    }
}